name: Create Pull Request for tls-trustore
on:
  issue_comment:
    types: [created]

jobs:
  create_pull_request:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: keystore-renewal-2  # Define the branch name as an environment variable
      FLAG: 1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if Branch Exists Remotely
        id: check_branch_remotely
        run: |
          echo "Checking if branch $BRANCH_NAME exists remotely..."
          if git ls-remote --heads origin $BRANCH_NAME | grep -q "refs/heads/$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists remotely."
            echo "::set-output name=result::exists"
          else
            echo "Branch $BRANCH_NAME does not exist remotely."
            echo "::set-output name=result::not_exists"
          fi

      - name: Checkout Existing Branch
        if: steps.check_branch_remotely.outputs.result == 'exists'
        run: |
          git fetch origin $BRANCH_NAME:$BRANCH_NAME
          git checkout $BRANCH_NAME

      - name: List Closed Pull Requests on Branch
        id: list_closed_prs
        run: |
          CLOSED_NON_MERGED_PRS=$(curl -X GET \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&head=${{ github.repository_owner }}:$BRANCH_NAME")

          echo "$CLOSED_NON_MERGED_PRS" | jq -r '.[] | select(.merged_at == null) | "PR Number: \(.number), Title: \(.title), Closed At: \(.closed_at)"'
          LAST_CLOSED_PR=$(echo "$CLOSED_NON_MERGED_PRS" | jq -r 'map(select(.merged_at == null)) | sort_by(.closed_at) | last')
      
          if [ -n "$LAST_CLOSED_PR" ]; then
            PR_NUMBER=$(echo "$LAST_CLOSED_PR" | jq -r '.number')
            echo "Opening PR #$PR_NUMBER"
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"state": "open"}' \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER"
          else
            echo "No closed, non-merged pull requests found."
          fi

      - name: Create New Branch
        if: steps.check_branch_remotely.outputs.result == 'not_exists'
        run: |
          git checkout -b $BRANCH_NAME
      
      - name: Update apgi-trustore in helm-overrides
        run: |
          # Navigate to the helm-overrides folder
          cd helm-overrides

          # Find the file with the largest number
          LARGEST_FILE=$(ls apgi-trustore-*.yaml | sort -V | tail -n 1)
          echo "Largest file found: $LARGEST_FILE"

          # Extract the largest number and increment it
          CURRENT_NUMBER=$(echo $LARGEST_FILE | grep -oP '\d+(?=\.yaml)')
          NEW_NUMBER=$((CURRENT_NUMBER + 1))
          NEW_FILE="apgi-trustore-${NEW_NUMBER}.yaml"
          echo "Renaming $LARGEST_FILE to $NEW_FILE"

          # Rename the file
          mv "$LARGEST_FILE" "$NEW_FILE"
          
          echo "Renamed $LARGEST_FILE to $NEW_FILE successfully."

          yq eval ".tls.keystore-name = \"truststore-${NEW_NUMBER}\"" -i "$NEW_FILE"

          echo "Updated truststore-name to truststore-${NEW_NUMBER} in $NEW_FILE"

      - name: Update apgx yaml
        id: read_version
        run: |
            FILE_PATH="apgx.yaml"
            ENVIRONMENT="tst"      
            DEPLOY_TYPE="DEPLOY_KEYSTORE"  

            # Use yq to update the deploy_types in the YAML file without double quotes
            # yq eval ".work.team.env.${ENVIRONMENT}.deploy_types = ${DEPLOY_TYPE}" -i $FILE_PATH

            # yq eval ".work.team.env.${ENVIRONMENT}.deploy_types = \"${DEPLOY_TYPE}\"" -i $FILE_PATH  
            yq eval ".work.team.env.${ENVIRONMENT}.deploy_types = DEPLOY_KEYSTORE_1 -i $FILE_PATH    
      
      - name: Commit Changes
        if: ${{ env.FLAG == '1' }}
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Add new-file.txt via GitHub Actions"

      - name: Push Changes to Branch
        if: ${{ env.FLAG == '1' }}
        run: |
          git push origin $BRANCH_NAME

      - name: Create Pull Request and Add Labels
        if: ${{ env.FLAG == '1' }}
        id: create_pr
        run: |
          PR_TITLE="feat: keystore renewal automation"
          PR_BODY="This pull request was created automatically from changes made in a new branch."
          PR_HEAD="$BRANCH_NAME"
          PR_BASE="main"
      
          # Create the pull request
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "'"$PR_TITLE"'",
              "body": "'"$PR_BODY"'",
              "head": "'"$PR_HEAD"'",
              "base": "'"$PR_BASE"'"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")
      
          PR_NUMBER=$(echo "$response" | jq -r '.number')
          echo "::set-output name=pull_request_number::$PR_NUMBER"
      
          # Add labels to the pull request
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "labels": ["keystore","automation"]
            }' \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels"

      # - name: List Closed Pull Requests on Branch
      #   id: list_closed_prs
      #   run: |
      #     CLOSED_NON_MERGED_PRS=$(curl -X GET \
      #       -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "Accept: application/vnd.github.v3+json" \
      #       "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&head=${{ github.repository_owner }}:$BRANCH_NAME")

      #     echo "$CLOSED_NON_MERGED_PRS" | jq -r '.[] | select(.merged_at == null) | "PR Number: \(.number), Title: \(.title), Closed At: \(.closed_at)"'
