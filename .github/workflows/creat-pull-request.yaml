name: Create Pull Request 
on:
  issue_comment:
    types: [created]

jobs:
  create_pull_request:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: update_version_tst2  # Define the branch name as an environment variable
      NEW_VERSION: 29.1.1        # New version
      FLAG: 0

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if Branch Exists Remotely
        id: check_branch_remotely
        run: |
          echo "Checking if branch $BRANCH_NAME exists remotely..."
          if git ls-remote --heads origin $BRANCH_NAME | grep -q "refs/heads/$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists remotely."
            echo "::set-output name=result::exists"
          else
            echo "Branch $BRANCH_NAME does not exist remotely."
            echo "::set-output name=result::not_exists"
          fi

      - name: Checkout Existing Branch
        if: steps.check_branch_remotely.outputs.result == 'exists'
        run: |
          git fetch origin $BRANCH_NAME:$BRANCH_NAME
          git checkout $BRANCH_NAME

      - name: Create New Branch
        if: steps.check_branch_remotely.outputs.result == 'not_exists'
        run: |
          git checkout -b $BRANCH_NAME

      - name: Read Version from Terraform File
        id: read_version
        run: |
          # update_version() {
          #   local FILE_PATH=$1
          #   VERSION=$(grep 'version' "$FILE_PATH" | awk -F '\"' '{print $2}')
          #   echo "VERSION=$VERSION" >> $GITHUB_ENV
          #   echo "Terraform version: $VERSION"
      
          #   if [ "$VERSION" != "$NEW_VERSION" ]; then
          #     echo "Updating version to $NEW_VERSION"
          #     sed -i 's/version = \"'$VERSION'\"/version = \"'$NEW_VERSION'\"/' "$FILE_PATH"
          #     echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          #     FLAG=1
          #     echo "FLAG=$FLAG" >> $GITHUB_ENV
          #   fi
          # }
          # update_version terraform/test-1/terraform.tfvars
          # update_version terraform/test-2/terraform.tfvars
          # update_version terraform/test-3/terraform.tfvars
          update_version() {
            local FILE_PATHS=("$@")  # Accept array of file paths
            for FILE_PATH in "${FILE_PATHS[@]}"; do
              local VERSION=$(grep 'version' "$FILE_PATH" | awk -F '\"' '{print $2}')
              echo "VERSION=$VERSION" >> $GITHUB_ENV
              echo "Terraform version: $VERSION"
      
                    if [ "$VERSION" != "$NEW_VERSION" ]; then
                      echo "Updating version in $FILE_PATH to $NEW_VERSION"
                      sed -i 's/version = \"'$VERSION'\"/version = \"'$NEW_VERSION'\"/' "$FILE_PATH"
                      echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
                      FLAG=1
                      echo "FLAG=$FLAG" >> $GITHUB_ENV
              fi
            done
          }
          
          update_version \
            "terraform/test-1/terraform.tfvars" \
            "terraform/test-2/terraform.tfvars" \
            "terraform/test-3/terraform.tfvars"          
      
      - name: Commit Changes
        if: ${{ env.FLAG == '1' }}
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Add new-file.txt via GitHub Actions"

      - name: Push Changes to Branch
        if: ${{ env.FLAG == '1' }}
        run: |
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        if: ${{ env.FLAG == '1' }}
        id: create_pr
        run: |
          PR_TITLE="feat: Updating terraform version "
          PR_BODY="This pull request was created automatically from changes made in a new branch."
          PR_HEAD="$BRANCH_NAME"
          PR_BASE="main"
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            --data '{
              "title": "'"$PR_TITLE"'",
              "body": "'"$PR_BODY"'",
              "head": "'"$PR_HEAD"'",
              "base": "'"$PR_BASE"'",
              "labels": ["bug"]
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")

          echo "::set-output name=pull_request_number::$(echo "$response" | jq -r '.number')"
