name: Create Pull Request 
on:
  issue_comment:
    types: [created]
  # schedule:
  #   - cron: "*/5 * * * *"  # Run tst_upgrade job every 5 minutes
  #   - cron: "* * * * *"     # Run bld_upgrade job every minute

env:
  NEW_VERSION: 21.1.52        # New version
  FLAG: 0

jobs:
  tst_upgrade:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: tst_upgrade  # Define the branch name as an environment variable

    # if: github.event.schedule == '*/5 * * * *'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if Branch Exists Remotely
        id: check_branch_remotely
        run: |
          echo "Checking if branch $BRANCH_NAME exists remotely..."
          if git ls-remote --heads origin $BRANCH_NAME | grep -q "refs/heads/$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists remotely."
            echo "::set-output name=result::exists"
          else
            echo "Branch $BRANCH_NAME does not exist remotely."
            echo "::set-output name=result::not_exists"
          fi

      - name: Checkout Existing Branch
        if: steps.check_branch_remotely.outputs.result == 'exists'
        run: |
          git fetch origin $BRANCH_NAME:$BRANCH_NAME
          git checkout $BRANCH_NAME

      - name: List Closed Pull Requests on Branch
        id: list_closed_prs
        run: |
          CLOSED_NON_MERGED_PRS=$(curl -X GET \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&head=${{ github.repository_owner }}:$BRANCH_NAME")

          echo "$CLOSED_NON_MERGED_PRS" | jq -r '.[] | select(.merged_at == null) | "PR Number: \(.number), Title: \(.title), Closed At: \(.closed_at)"'
          LAST_CLOSED_PR=$(echo "$CLOSED_NON_MERGED_PRS" | jq -r 'map(select(.merged_at == null)) | sort_by(.closed_at) | last')
      
          if [ -n "$LAST_CLOSED_PR" ]; then
            PR_NUMBER=$(echo "$LAST_CLOSED_PR" | jq -r '.number')
            echo "Opening PR #$PR_NUMBER"
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"state": "open"}' \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER"
          else
            echo "No closed, non-merged pull requests found."
          fi

      - name: Create New Branch
        if: steps.check_branch_remotely.outputs.result == 'not_exists'
        run: |
          git checkout -b $BRANCH_NAME
      
      - name: Read Version from Terraform File
        id: read_version
        run: |
          # update_version() {
          #   local FILE_PATH=$1
          #   VERSION=$(grep 'version' "$FILE_PATH" | awk -F '\"' '{print $2}')
          #   echo "VERSION=$VERSION" >> $GITHUB_ENV
          #   echo "Terraform version: $VERSION"
      
          #   if [ "$VERSION" != "$NEW_VERSION" ]; then
          #     echo "Updating version to $NEW_VERSION"
          #     sed -i 's/version = \"'$VERSION'\"/version = \"'$NEW_VERSION'\"/' "$FILE_PATH"
          #     echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          #     FLAG=1
          #     echo "FLAG=$FLAG" >> $GITHUB_ENV
          #   fi
          # }
          # update_version terraform/test-1/terraform.tfvars
          # update_version terraform/test-2/terraform.tfvars
          # update_version terraform/test-3/terraform.tfvars
          update_version() {
            local FILE_PATHS=("$@")  # Accept array of file paths
            for FILE_PATH in "${FILE_PATHS[@]}"; do
              VERSION=$(awk -F '\"' '/version/ {print $2; exit}' "$FILE_PATH")
              echo "VERSION=$VERSION" >> $GITHUB_ENV
              echo "Terraform version: $VERSION"
      
                    if [ "$VERSION" != "$NEW_VERSION" ]; then
                      echo "Updating version in $FILE_PATH to $NEW_VERSION"
                      sed -i '0,/version = \"'$VERSION'\"/s//version = \"'$NEW_VERSION'\"/' "$FILE_PATH"
                      echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
                      FLAG=1
                      echo "FLAG=$FLAG" >> $GITHUB_ENV
                      echo "flag=$FLAG" >> "$GITHUB_OUTPUT"
                      
                    fi
                    done
          }
          
          update_version \
            "TST/test-1/terraform.tfvars" \
            "TST/test-2/terraform.tfvars" \
            "TST/test-3/terraform.tfvars"          


      - name: Commit Changes
        if: ${{ env.FLAG == '1' }}
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Add new-file.txt via GitHub Actions"

    

      - name: Push Changes to Branch
        if: ${{ env.FLAG == '1' }}
        run: |
          git push origin $BRANCH_NAME

      - name: Create Pull Request and Add Labels
        if: ${{ env.FLAG == '1' }}
        id: create_pr
        run: |
          PR_TITLE="feat: Updating terraform version"
          PR_BODY="This pull request was created automatically from changes made in a new branch."
          PR_HEAD="$BRANCH_NAME"
          PR_BASE="main"
      
          # Create the pull request
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "'"$PR_TITLE"'",
              "body": "'"$PR_BODY"'",
              "head": "'"$PR_HEAD"'",
              "base": "'"$PR_BASE"'"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")
      
          PR_NUMBER=$(echo "$response" | jq -r '.number')
          echo "::set-output name=pull_request_number::$PR_NUMBER"
      
          # Add labels to the pull request
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "labels": ["TST-ENV","Template-update"]
            }' \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels"

#############################################################################################
#############################################################################################
########################BLD_UPGRADE#########################################################
#############################################################################################


  bld_upgrade:
    # needs: tst_upgrade  # Run this job only after tst_upgrade is complete
    needs: tst_upgrade  # Make sure it runs after tst_upgrade
    if: needs.tst_upgrade.outputs.flag == '0'
    # if: env.FLAG == '0'
    # if: ${{ env.FLAG == '1' }}
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: bld_upgrade  # Define the branch name as an environment variable

    steps:
      - name: Echo Flag
        run: |
          echo "Flag value: ${{ needs.tst_upgrade.outputs.flag }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check if Branch Exists Remotely
        id: check_branch_remotely
        run: |
          echo "Checking if branch $BRANCH_NAME exists remotely..."
          if git ls-remote --heads origin $BRANCH_NAME | grep -q "refs/heads/$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists remotely."
            echo "::set-output name=result::exists"
          else
            echo "Branch $BRANCH_NAME does not exist remotely."
            echo "::set-output name=result::not_exists"
          fi

      - name: Checkout Existing Branch
        if: steps.check_branch_remotely.outputs.result == 'exists'
        run: |
          git fetch origin $BRANCH_NAME:$BRANCH_NAME
          git checkout $BRANCH_NAME

      - name: List Closed Pull Requests on Branch
        id: list_closed_prs
        run: |
          CLOSED_NON_MERGED_PRS=$(curl -X GET \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&head=${{ github.repository_owner }}:$BRANCH_NAME")

          echo "$CLOSED_NON_MERGED_PRS" | jq -r '.[] | select(.merged_at == null) | "PR Number: \(.number), Title: \(.title), Closed At: \(.closed_at)"'
          LAST_CLOSED_PR=$(echo "$CLOSED_NON_MERGED_PRS" | jq -r 'map(select(.merged_at == null)) | sort_by(.closed_at) | last')
      
          if [ -n "$LAST_CLOSED_PR" ]; then
            PR_NUMBER=$(echo "$LAST_CLOSED_PR" | jq -r '.number')
            echo "Opening PR #$PR_NUMBER"
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"state": "open"}' \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER"
          else
            echo "No closed, non-merged pull requests found."
          fi

      - name: Create New Branch
        if: steps.check_branch_remotely.outputs.result == 'not_exists'
        run: |
          git checkout -b $BRANCH_NAME
      
      - name: Read Version from Terraform File
        id: read_version
        run: |
          # update_version() {
          #   local FILE_PATH=$1
          #   VERSION=$(grep 'version' "$FILE_PATH" | awk -F '\"' '{print $2}')
          #   echo "VERSION=$VERSION" >> $GITHUB_ENV
          #   echo "Terraform version: $VERSION"
      
          #   if [ "$VERSION" != "$NEW_VERSION" ]; then
          #     echo "Updating version to $NEW_VERSION"
          #     sed -i 's/version = \"'$VERSION'\"/version = \"'$NEW_VERSION'\"/' "$FILE_PATH"
          #     echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          #     FLAG=1
          #     echo "FLAG=$FLAG" >> $GITHUB_ENV
          #   fi
          # }
          # update_version terraform/test-1/terraform.tfvars
          # update_version terraform/test-2/terraform.tfvars
          # update_version terraform/test-3/terraform.tfvars
          update_version() {
            local FILE_PATHS=("$@")  # Accept array of file paths
            for FILE_PATH in "${FILE_PATHS[@]}"; do
              VERSION=$(awk -F '\"' '/version/ {print $2; exit}' "$FILE_PATH")
              echo "VERSION=$VERSION" >> $GITHUB_ENV
              echo "Terraform version: $VERSION"
      
                    if [ "$VERSION" != "$NEW_VERSION" ]; then
                      echo "Updating version in $FILE_PATH to $NEW_VERSION"
                      sed -i '0,/version = \"'$VERSION'\"/s//version = \"'$NEW_VERSION'\"/' "$FILE_PATH"
                      echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
                      FLAG=1
                      echo "FLAG=$FLAG" >> $GITHUB_ENV
              fi
            done
          }
          
          update_version \
            "BLD/test-1/terraform.tfvars" \
            "BLD/test-2/terraform.tfvars" \
            "BLD/test-3/terraform.tfvars"          
      
      - name: Commit Changes
        if: ${{ env.FLAG == '1' }}
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Add new-file.txt via GitHub Actions"

      - name: Push Changes to Branch
        if: ${{ env.FLAG == '1' }}
        run: |
          git push origin $BRANCH_NAME

      - name: Create Pull Request and Add Labels
        if: ${{ env.FLAG == '1' }}
        id: create_pr
        run: |
          PR_TITLE="feat: Updating terraform version"
          PR_BODY="This pull request was created automatically from changes made in a new branch."
          PR_HEAD="$BRANCH_NAME"
          PR_BASE="main"
      
          # Create the pull request
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "title": "'"$PR_TITLE"'",
              "body": "'"$PR_BODY"'",
              "head": "'"$PR_HEAD"'",
              "base": "'"$PR_BASE"'"
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls")
      
          PR_NUMBER=$(echo "$response" | jq -r '.number')
          echo "::set-output name=pull_request_number::$PR_NUMBER"
      
          # Add labels to the pull request
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "labels": ["TST-ENV","Template-update"]
            }' \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels"

